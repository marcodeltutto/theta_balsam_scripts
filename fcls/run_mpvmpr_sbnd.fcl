#include "services_sbnd.fcl"
#include "simulationservices_sbnd.fcl"
#include "messages_sbnd.fcl"
#include "rootoutput_sbnd.fcl"

#include "multipartvertex_sbnd.fcl"

#include "largeantmodules_sbnd.fcl"
#include "mcreco.fcl"

#include "detsimmodules_sbnd.fcl"
#include "crtsimmodules_sbnd.fcl"
#include "opdetdigitizer_sbnd.fcl"

#include "caldata_sbnd.fcl"
#include "hitfindermodules_sbnd.fcl"
#include "cluster3d_sbnd.fcl"


process_name: MPVMPR

services:
{
    TFileService: { fileName: "filename.root" }
    @table::sbnd_simulation_services
    #@table::sbnd_g4_services
    #@table::sbnd_detsim_services
    #@table::sbnd_services
}

source:
{
    module_type: EmptyEvent
    timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
    maxEvents: 10
    firstRun: 1
    firstEvent: 1
}

physics:
{

  producers:
  {
    rns:       { module_type: "RandomNumberSaver" }

    generator: @local::MultiPartVertex
    rain:      @local::MultiPartRain

    largeant:  @local::sbnd_largeant
    mcreco:    @local::standard_mcreco

    daq:       @local::sbnd_simwire
    crt:       @local::sbnd_crtsim
    opdaq:     @local::sbnd_opdetdigitizer

    caldata:   @local::sbnd_calwire
    gaushit:   @local::sbnd_gaushitfinder
    cluster3d: @local::sbnd_cluster3d

  }

  analyzers:
  {
    # supera: {
    #   module_type: "LArSoftSuperaDriver"
    #   supera_params: "supera_mpvmpr.fcl"
    #   out_filename: "larcv.root"
    #   unique_filename: false
    #   stream: "mc"
    #   Verbosity: 2
    #   StrictDataLoading: false
    # }
  }

  simulate: [
      rns
    , generator
    , rain
    , largeant
    , mcreco
    , daq, crt
    , opdaq
    , caldata
    , gaushit
    , cluster3d
  ]

  trigger_paths: [simulate]
  # analyze: [supera]
  out_stream: [out1]
  # end_paths: [analyze, out_stream]
  # end_paths: [analyze]
  end_paths: [out_stream]
}





#
# Generator
#

physics.producers.generator.DebugMode    : 1
physics.producers.generator.G4Time       : 0
physics.producers.generator.G4TimeJitter : 0
physics.producers.generator.XRange       : [30,30]
physics.producers.generator.YRange       : [30,30]
physics.producers.generator.ZRange       : [100,100]
physics.producers.generator.TPCRange     : [[0,0],[0,1]]
physics.producers.generator.MultiMax     : 6
physics.producers.generator.MultiMin     : 2
physics.producers.generator.ParticleParameter.PDGCode      : [[-11,11,-13,13],       [111], [211,-211],     [2212]]
physics.producers.generator.ParticleParameter.MinMulti     : [              1,           0,          0,          0]
physics.producers.generator.ParticleParameter.MaxMulti     : [              1,           1,          2,          4]
physics.producers.generator.ParticleParameter.ProbWeight   : [              1,           1,          1,          2]
physics.producers.generator.ParticleParameter.KERange      : []
physics.producers.generator.ParticleParameter.MomRange     : [     [0.05,2.0], [0.005,0.5], [0.05,0.7], [0.05,0.7]]

physics.producers.rain.DebugMode    : 1
physics.producers.rain.G4Time       : 0
physics.producers.rain.G4TimeJitter : 0
physics.producers.rain.XRange       : [20,20]
physics.producers.rain.YRange       : [20,20]
physics.producers.rain.ZRange       : [100,100]
physics.producers.rain.DirectInward : true
physics.producers.rain.TPCRange     : [[0,0],[0,1]]
physics.producers.rain.MultiMax     : 6
physics.producers.rain.MultiMin     : 3
physics.producers.rain.ParticleParameter.PDGCode      : [   [-13,13],     [11,22],     [2212]]
physics.producers.rain.ParticleParameter.MinMulti     : [          0,           0,          0]
physics.producers.rain.ParticleParameter.MaxMulti     : [         30,           2,         30]
physics.producers.rain.ParticleParameter.ProbWeight   : [          5,           1,          2]
physics.producers.rain.ParticleParameter.KERange      : []
physics.producers.rain.ParticleParameter.MomRange     : [ [0.05,2.0],   [0.1,0.2], [0.05,0.7]]


#
# Geant4
#

physics.producers.largeant.KeepParticlesInVolumes: ["volCryostat", "volTaggerTopHigh", "volTaggerTopLow", "volTaggerSideLeft", "volTaggerSideRight", "volTaggerFaceFront", "v
olTaggerFaceBack", "volTaggerBot"]

services.LArG4Parameters.FillSimEnergyDeposits: true
services.LArG4Parameters.KeepEMShowerDaughters: true
services.LArG4Parameters.NoPhotonPropagation: true
services.LArG4Parameters.ParticleKineticEnergyCut: 0.0005
#services.LArG4Parameters.DisableWireplanes: true
#services.LArG4Parameters.EnabledPhysics: ["Em","SynchrotronAndGN","Ion","Stopping","FastOptical"]
#services.LArG4Parameters.EnabledPhysics: ["Em","SynchrotronAndGN","Ion","Hadron","Decay","HadronElastic","Stopping"]
#services.LArG4Parameters.EnabledPhysics: ["Em","SynchrotronAndGN","Ion","Hadron","Decay","HadronElastic","Stopping","Optical"]
services.LArPropertiesService.ScintYield: 0
services.LArPropertiesService.ScintByParticleType: false


#
# MCReco
#

physics.producers.mcreco.SimEnergyDepositLabel: "largeant:TPCActive"
physics.producers.mcreco.SimChannelLabel: "largeant:TPCActive"
physics.producers.mcreco.MCParticleLabel: "largeant"
physics.producers.mcreco.UseSimEnergyDeposit: true
physics.producers.mcreco.MCRecoPart.SavePathPDGList: [13,-13,211,-211,111,311,310,130,321,-321,2212,2112,2224,2214,2114,1114,3122,1000010020,1000010030,1000020030,1000020040
]

#
# Caldata
#

physics.producers.caldata.DigitModuleLabel: "daq"
physics.producers.caldata.ROITool.Threshold: [19, 35 , 13]
physics.producers.caldata.ROITool.uPlaneROIPad: [ 10, 10 ] # number of bins to pad both ends of the ROIs
physics.producers.caldata.ROITool.vPlaneROIPad: [ 10, 10 ] # number of bins to pad both ends of the ROIs
physics.producers.caldata.ROITool.zPlaneROIPad: [ 10, 10 ] # number of bins to pad both ends of the ROIs


#
# Gaushit
#

physics.producers.gaushit.CalDataModuleLabel: "caldata"



outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName: "sbnd_%p-%tc.art.root"
   dataTier: "reco"
   compressionLevel: 1
   # skim output (if needed)
   # outputCommands: [ "drop *",
   #                   "keep *_mcreco_*_*",
   #                  "keep recob::Hit*_gaushit_*_*"
   #                 ]

   # Only uncomment if selecting events with nu in active volume
   # SelectEvents: [simulate]
 }
}

services.message.destinations :
{
  STDCOUT:
  {
    type:      "cout"      #tells the message service to output this destination to cout
    threshold: "INFO"      #tells the message service that this destination applies to WARNING and higher level messages
    categories:
    {
      default:
      {
        limit:       1000  #don't print anything at the infomsg level except the explicitly named categories
        reportEvery: 1
      }
    }
  }
}

